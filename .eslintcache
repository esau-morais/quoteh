[{"/home/esau-morais/Downloads/quoteh/src/index.js":"1","/home/esau-morais/Downloads/quoteh/src/App.js":"2","/home/esau-morais/Downloads/quoteh/src/components/quote.js":"3"},{"size":479,"mtime":1607988761421,"results":"4","hashOfConfig":"5"},{"size":151,"mtime":1607990966369,"results":"6","hashOfConfig":"5"},{"size":4112,"mtime":1608042785817,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qvgcip",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/esau-morais/Downloads/quoteh/src/index.js",[],"/home/esau-morais/Downloads/quoteh/src/App.js",[],"/home/esau-morais/Downloads/quoteh/src/components/quote.js",["15"],"import { useState, useEffect, useRef } from 'react';\n\nimport { ReactComponent as Logo } from '../assets/Logo.svg';\nimport { ReactComponent as Skeleton } from '../assets/Skeleton.svg';\nimport './quote.css';\n\nfunction Quote() {\n  // Quote initial state: string\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  // Selection initial state: number\n  const [xLines, setXLines] = useState(0);\n  const [yLines, setYLines] = useState(0);\n  // Selected text initial state: string\n  const [selectedText, setSelectedText] = useState('');\n  const selectedTextRef = useRef(null);\n  // Popover initial state: false\n  const [showPopover, setShowPopover] = useState(false);\n\n  // Hide popover when the text is not selected¹\n  const hidePopover = () => setShowPopover(false);\n\n  const onSelectText = props => {\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n\n    if (!selectedText) {\n      // Hide popover when the text is not selected¹\n      hidePopover();\n\n      return;\n    }\n\n    const selectionRange = selection.getRangeAt(0);\n\n    const startNode = selectionRange.startContainer.parentNode;\n    const endNode = selectionRange.endContainer.parentNode;\n\n    const highlightable = selectedTextRef.current;\n    const highlightableRegion = highlightable.querySelector('.popover');\n\n    if (highlightableRegion) {\n      if (\n        !highlightableRegion.contains(startNode) ||\n        !highlightableRegion.contains(endNode)\n      ) {\n        // Hide popover when the text is not selected¹\n        hidePopover();\n\n        return;\n      }\n    } else if (\n      !highlightable.contains(startNode) ||\n      !highlightable.contains(endNode)\n    ) {\n      // Hide popover when the text is not selected¹\n      hidePopover();\n\n      return;\n    }\n\n    if (!startNode.isSameNode(endNode)) {\n      // Hide popover when the text is not selected¹\n      hidePopover();\n\n      return;\n    }\n\n    const { x, y, width } = selectionRange.getBoundingClientRect();\n    if (!width) {\n      // Hide popover when the text is not selected¹, which means width = 0\n      hidePopover();\n\n      return;\n    }\n\n    setXLines(x + width / 10);\n    setYLines(y + window.scrollY - 34);\n    setSelectedText(selectedText);\n    setShowPopover(true);\n\n    const { onHighlightPop = () => {} } = props;\n    onHighlightPop(selectedText);\n  }\n\n  useEffect(() => {\n    window.addEventListener('mouseup', onSelectText);\n\n    return () => window.removeEventListener('mouseup', onSelectText);\n  })\n\n  /*const shareSelectedText = () => {\n    window.addEventListener('click', e => {\n      if(navigator.share) {\n        navigator.share({\n          title: `${selectedText}`,\n          url: \"\"\n        })\n          .then(() => console.log(\"shared!\"))\n          .catch(err => console.log(err))\n      }\n    })\n  }*/\n\n  // 1. Get the quote and its author\n  // 2. After the user clicks the button, it generates a new quote\n  const getQuote = () => {\n    fetch('https://type.fit/api/quotes')\n      .then(res => res.json())\n      .then(data => {\n        let quoteId = Math.floor(Math.random() * data.length);\n        let randomQuote = data[quoteId];\n        setQuote(randomQuote['text']);\n        setAuthor(randomQuote['author']);\n        setIsLoading(false);\n      })\n  }\n\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  return (\n    <div>\n      <Logo className=\"logo\" />\n      {isLoading ? (\n        <Skeleton className=\"skeleton\" />\n      ) : (\n        <>\n          <blockquote ref={selectedTextRef}>\n            {showPopover &&  (\n              <div\n                className=\"popover\"\n                style={{ left: `${xLines}px`, top: `${yLines}px` }}\n              >\n                <span role=\"button\">You highlighted</span>\n              </div>\n            )}\n\n            <p>\n              \"{quote}\"\n            </p>\n            <cite>\n              {author}\n            </cite>\n          </blockquote>\n\n          <button onClick={getQuote}>Give me more</button>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Quote;\n\n",{"ruleId":"16","severity":1,"message":"17","line":16,"column":10,"nodeType":"18","messageId":"19","endLine":16,"endColumn":22},"no-unused-vars","'selectedText' is assigned a value but never used.","Identifier","unusedVar"]